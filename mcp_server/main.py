# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:25:51+00:00



import argparse
import json
import os
from typing import *
from typing import Any, Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity

from models import HTTPValidationError, StatusCall, VerifyName, VerifyPhone

app = MCPProxy(
    description='An API collection for Covid 19 by Crediwatch',
    title="Crediwatch's Covid APIs",
    version='1.3.0',
)


@app.get('/api/v1/status/call', tags=['status_retrieval'])
def status_call_api_v1_status_call_get(query: str):
    """
    Status Call
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/v1/status/sku', tags=['status_retrieval'])
def status_sku_api_v1_status_sku_get(query: str):
    """
    Status Sku
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/v1/verify/name', tags=['identity_verification'])
def verify_name_api_v1_verify_name_get(
    query: str, state: Optional[str] = None, city: Optional[str] = None
):
    """
    Verify Name
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/v1/verify/phone', tags=['identity_verification'])
def verify_business_api_v1_verify_phone_get(
    query: str, locking_period: Optional[Any] = 24
):
    """
    Verify Business
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get('/api/v1/verify/sku', tags=['identity_verification'])
def verify_sku_api_v1_verify_sku_get(query: str, locking_period: Optional[Any] = 24):
    """
    Verify Sku
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
